generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Organization {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  secretKey  String   @unique
  licenseKey String

  sources Source[]
  tenants Tenant[]
}

model Tenant {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  identifier String

  destinations   Destination[]
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId Int
}

model ConfigurationColumn {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  column_name         String
  name_in_source      String
  name_in_destination String
  dest_format_str     String
  transformer         String
  is_primary_key      Boolean
  is_last_modified    Boolean
  configuration       Configuration @relation(fields: [configurationId], references: [id])
  configurationId     Int
}

model Configuration {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  destinations        Destination[]
  view                View                  @relation(fields: [viewId], references: [id], onDelete: Cascade)
  viewId              Int
  ConfigurationColumn ConfigurationColumn[]
}

model View {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  tableExpression String
  tenantColumn    String

  source         Source          @relation(fields: [sourceId], references: [id], onDelete: Cascade)
  sourceId       Int
  configurations Configuration[]
}

model Source {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  name       String
  status     String   @default("REACHABLE")
  sourceType String

  views          View[]
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId Int
}

model Destination {
  id               Int      @id @default(autoincrement())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  name             String
  status           String   @default("REACHABLE")
  destinationType  String   @default("PROVISIONED_S3")
  connectionString String?

  transfers       Transfer[]
  configuration   Configuration @relation(fields: [configurationId], references: [id], onDelete: Cascade)
  configurationId Int
  tenant          Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId        Int
}

model Transfer {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  finalizedAt DateTime?
  status      String

  destination   Destination @relation(fields: [destinationId], references: [id], onDelete: Cascade)
  destinationId Int
}
